type User {
	id: ID
	firstName: String
	lastName: String
	email: String
	tickets: [EventTickets]
}
type Event {
	id: ID
	name: String
	category: String
	date: String
	location: String
	numberOfTickets: NumberOfTickets
	ticketsAvailable: [TicketsAvailable]
}
type EventTickets {
	id: ID
	name: String
	passType: String
	date: String
	location: String
	numberOfTickets: Int
}
type NumberOfTickets {
	available: Int
	sold: Int
}
type TicketsAvailable {
	id: ID
	user: User
	passType: String
	numberOfTickets: Int
	cost: Int
	event: Event
	comments: String
}
type SearchResult {
	searchType: String
	details: Event
}
type Query {
	currentUser: User
	events(id: String, category: String, location: String, skip: Int, first: Int): [Event]
	eventsSearch(queryType: [SearchFormat], query: String): [Event]
	ticketsAvailable: [TicketsAvailable]
	userTickets: User
}

enum CategoryFormat {
	Sports
	Festivals
	Club
	Nights
	Concerts
}

enum SearchFormat {
	Event
	Venue
	Location
}

type AuthPayload {
	user: User
}

type TicketPayload {
	ticket: TicketsAvailable
}

type BuyTicketPayload {
	ticketIds: [String]
	text: String
}

type AuthResponse {
	token: String
	name: String
}
input AuthInput {
	accessToken: String!
}

type Mutation {
	addTicket(passType: String!, numberOfTickets: Int!, cost: Int!, event: String, comments: String): TicketPayload
	buyTicket(ticketIds: [String]!): BuyTicketPayload
	authGoogle(input: AuthInput!): AuthResponse
	signup(firstName: String!, lastName: String!, email: String!, password: String!): AuthPayload
	login(email: String!, password: String!): AuthPayload
	logout: Boolean
}
