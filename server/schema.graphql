type User {
	id: ID
	firstName: String
	lastName: String
	email: String
}
type Event {
	id: ID
	name: String
	category: String
	date: String
	location: String
	numberOfTickets: NumberOfTickets
	ticketsAvailable: [TicketsAvailable]
	
}
type NumberOfTickets{
	available: Int
	sold: Int
}
type TicketsAvailable {
	id: ID
	user: User 
	passType: String
	numberOfTickets: Int 
	cost: Int
	event: Event
}
type SearchResult{
	searchType: String
	details: Event
}
type Query {
	currentUser: User
	events(id:String,category: String, skip: Int, first: Int): [Event]
	eventsSearch(query:String): [Event]
	ticketsAvailable: [TicketsAvailable]
	
}

enum CategoryFormat {
	Sport
	Festival
	Music
}

type AuthPayload {
	user: User
}

type AuthResponse {
	token: String
	name: String
}
input AuthInput {
	accessToken: String!
}

type Mutation {
	authGoogle(input: AuthInput!): AuthResponse
	signup(firstName: String!, lastName: String!, email: String!, password: String!): AuthPayload
	login(email: String!, password: String!): AuthPayload
	logout: Boolean
}
