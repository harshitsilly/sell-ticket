// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  event: (where?: EventWhereInput) => Promise<boolean>;
  eventTickets: (where?: EventTicketsWhereInput) => Promise<boolean>;
  ticketsAvailable: (where?: TicketsAvailableWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  event: (where: EventWhereUniqueInput) => EventNullablePromise;
  events: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Event>;
  eventsConnection: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EventConnectionPromise;
  eventTickets: (
    where: EventTicketsWhereUniqueInput
  ) => EventTicketsNullablePromise;
  eventTicketses: (args?: {
    where?: EventTicketsWhereInput;
    orderBy?: EventTicketsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<EventTickets>;
  eventTicketsesConnection: (args?: {
    where?: EventTicketsWhereInput;
    orderBy?: EventTicketsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EventTicketsConnectionPromise;
  ticketsAvailable: (
    where: TicketsAvailableWhereUniqueInput
  ) => TicketsAvailableNullablePromise;
  ticketsAvailables: (args?: {
    where?: TicketsAvailableWhereInput;
    orderBy?: TicketsAvailableOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<TicketsAvailable>;
  ticketsAvailablesConnection: (args?: {
    where?: TicketsAvailableWhereInput;
    orderBy?: TicketsAvailableOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TicketsAvailableConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createEvent: (data: EventCreateInput) => EventPromise;
  updateEvent: (args: {
    data: EventUpdateInput;
    where: EventWhereUniqueInput;
  }) => EventPromise;
  updateManyEvents: (args: {
    data: EventUpdateManyMutationInput;
    where?: EventWhereInput;
  }) => BatchPayloadPromise;
  upsertEvent: (args: {
    where: EventWhereUniqueInput;
    create: EventCreateInput;
    update: EventUpdateInput;
  }) => EventPromise;
  deleteEvent: (where: EventWhereUniqueInput) => EventPromise;
  deleteManyEvents: (where?: EventWhereInput) => BatchPayloadPromise;
  createEventTickets: (data: EventTicketsCreateInput) => EventTicketsPromise;
  updateEventTickets: (args: {
    data: EventTicketsUpdateInput;
    where: EventTicketsWhereUniqueInput;
  }) => EventTicketsPromise;
  updateManyEventTicketses: (args: {
    data: EventTicketsUpdateManyMutationInput;
    where?: EventTicketsWhereInput;
  }) => BatchPayloadPromise;
  upsertEventTickets: (args: {
    where: EventTicketsWhereUniqueInput;
    create: EventTicketsCreateInput;
    update: EventTicketsUpdateInput;
  }) => EventTicketsPromise;
  deleteEventTickets: (
    where: EventTicketsWhereUniqueInput
  ) => EventTicketsPromise;
  deleteManyEventTicketses: (
    where?: EventTicketsWhereInput
  ) => BatchPayloadPromise;
  createTicketsAvailable: (
    data: TicketsAvailableCreateInput
  ) => TicketsAvailablePromise;
  updateTicketsAvailable: (args: {
    data: TicketsAvailableUpdateInput;
    where: TicketsAvailableWhereUniqueInput;
  }) => TicketsAvailablePromise;
  updateManyTicketsAvailables: (args: {
    data: TicketsAvailableUpdateManyMutationInput;
    where?: TicketsAvailableWhereInput;
  }) => BatchPayloadPromise;
  upsertTicketsAvailable: (args: {
    where: TicketsAvailableWhereUniqueInput;
    create: TicketsAvailableCreateInput;
    update: TicketsAvailableUpdateInput;
  }) => TicketsAvailablePromise;
  deleteTicketsAvailable: (
    where: TicketsAvailableWhereUniqueInput
  ) => TicketsAvailablePromise;
  deleteManyTicketsAvailables: (
    where?: TicketsAvailableWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  event: (
    where?: EventSubscriptionWhereInput
  ) => EventSubscriptionPayloadSubscription;
  eventTickets: (
    where?: EventTicketsSubscriptionWhereInput
  ) => EventTicketsSubscriptionPayloadSubscription;
  ticketsAvailable: (
    where?: TicketsAvailableSubscriptionWhereInput
  ) => TicketsAvailableSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type TicketsAvailableOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "passType_ASC"
  | "passType_DESC"
  | "numberOfTickets_ASC"
  | "numberOfTickets_DESC"
  | "cost_ASC"
  | "cost_DESC"
  | "comments_ASC"
  | "comments_DESC";

export type EventTicketsOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "passType_ASC"
  | "passType_DESC"
  | "date_ASC"
  | "date_DESC"
  | "location_ASC"
  | "location_DESC"
  | "numberOfTickets_ASC"
  | "numberOfTickets_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "endpoint_ASC"
  | "endpoint_DESC";

export type CategoryFormat =
  | "Sports"
  | "Festivals"
  | "Club"
  | "Nights"
  | "Concerts";

export type EventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "category_ASC"
  | "category_DESC"
  | "date_ASC"
  | "date_DESC"
  | "location_ASC"
  | "location_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpdateOneInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type EventWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface EventTicketsUpdateDataInput {
  name?: Maybe<String>;
  passType?: Maybe<String>;
  date?: Maybe<String>;
  location?: Maybe<String>;
  numberOfTickets?: Maybe<Int>;
}

export interface EventTicketsWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  passType?: Maybe<String>;
  passType_not?: Maybe<String>;
  passType_in?: Maybe<String[] | String>;
  passType_not_in?: Maybe<String[] | String>;
  passType_lt?: Maybe<String>;
  passType_lte?: Maybe<String>;
  passType_gt?: Maybe<String>;
  passType_gte?: Maybe<String>;
  passType_contains?: Maybe<String>;
  passType_not_contains?: Maybe<String>;
  passType_starts_with?: Maybe<String>;
  passType_not_starts_with?: Maybe<String>;
  passType_ends_with?: Maybe<String>;
  passType_not_ends_with?: Maybe<String>;
  date?: Maybe<String>;
  date_not?: Maybe<String>;
  date_in?: Maybe<String[] | String>;
  date_not_in?: Maybe<String[] | String>;
  date_lt?: Maybe<String>;
  date_lte?: Maybe<String>;
  date_gt?: Maybe<String>;
  date_gte?: Maybe<String>;
  date_contains?: Maybe<String>;
  date_not_contains?: Maybe<String>;
  date_starts_with?: Maybe<String>;
  date_not_starts_with?: Maybe<String>;
  date_ends_with?: Maybe<String>;
  date_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  numberOfTickets?: Maybe<Int>;
  numberOfTickets_not?: Maybe<Int>;
  numberOfTickets_in?: Maybe<Int[] | Int>;
  numberOfTickets_not_in?: Maybe<Int[] | Int>;
  numberOfTickets_lt?: Maybe<Int>;
  numberOfTickets_lte?: Maybe<Int>;
  numberOfTickets_gt?: Maybe<Int>;
  numberOfTickets_gte?: Maybe<Int>;
  AND?: Maybe<EventTicketsWhereInput[] | EventTicketsWhereInput>;
  OR?: Maybe<EventTicketsWhereInput[] | EventTicketsWhereInput>;
  NOT?: Maybe<EventTicketsWhereInput[] | EventTicketsWhereInput>;
}

export interface EventTicketsUpsertWithWhereUniqueNestedInput {
  where: EventTicketsWhereUniqueInput;
  update: EventTicketsUpdateDataInput;
  create: EventTicketsCreateInput;
}

export interface EventWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  category?: Maybe<CategoryFormat>;
  category_not?: Maybe<CategoryFormat>;
  category_in?: Maybe<CategoryFormat[] | CategoryFormat>;
  category_not_in?: Maybe<CategoryFormat[] | CategoryFormat>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  ticketsAvailable_every?: Maybe<TicketsAvailableWhereInput>;
  ticketsAvailable_some?: Maybe<TicketsAvailableWhereInput>;
  ticketsAvailable_none?: Maybe<TicketsAvailableWhereInput>;
  notifyUsers_every?: Maybe<UserWhereInput>;
  notifyUsers_some?: Maybe<UserWhereInput>;
  notifyUsers_none?: Maybe<UserWhereInput>;
  AND?: Maybe<EventWhereInput[] | EventWhereInput>;
  OR?: Maybe<EventWhereInput[] | EventWhereInput>;
  NOT?: Maybe<EventWhereInput[] | EventWhereInput>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  tickets?: Maybe<EventTicketsCreateManyInput>;
  endpoint?: Maybe<String>;
}

export interface EventTicketsScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  passType?: Maybe<String>;
  passType_not?: Maybe<String>;
  passType_in?: Maybe<String[] | String>;
  passType_not_in?: Maybe<String[] | String>;
  passType_lt?: Maybe<String>;
  passType_lte?: Maybe<String>;
  passType_gt?: Maybe<String>;
  passType_gte?: Maybe<String>;
  passType_contains?: Maybe<String>;
  passType_not_contains?: Maybe<String>;
  passType_starts_with?: Maybe<String>;
  passType_not_starts_with?: Maybe<String>;
  passType_ends_with?: Maybe<String>;
  passType_not_ends_with?: Maybe<String>;
  date?: Maybe<String>;
  date_not?: Maybe<String>;
  date_in?: Maybe<String[] | String>;
  date_not_in?: Maybe<String[] | String>;
  date_lt?: Maybe<String>;
  date_lte?: Maybe<String>;
  date_gt?: Maybe<String>;
  date_gte?: Maybe<String>;
  date_contains?: Maybe<String>;
  date_not_contains?: Maybe<String>;
  date_starts_with?: Maybe<String>;
  date_not_starts_with?: Maybe<String>;
  date_ends_with?: Maybe<String>;
  date_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  numberOfTickets?: Maybe<Int>;
  numberOfTickets_not?: Maybe<Int>;
  numberOfTickets_in?: Maybe<Int[] | Int>;
  numberOfTickets_not_in?: Maybe<Int[] | Int>;
  numberOfTickets_lt?: Maybe<Int>;
  numberOfTickets_lte?: Maybe<Int>;
  numberOfTickets_gt?: Maybe<Int>;
  numberOfTickets_gte?: Maybe<Int>;
  AND?: Maybe<EventTicketsScalarWhereInput[] | EventTicketsScalarWhereInput>;
  OR?: Maybe<EventTicketsScalarWhereInput[] | EventTicketsScalarWhereInput>;
  NOT?: Maybe<EventTicketsScalarWhereInput[] | EventTicketsScalarWhereInput>;
}

export interface EventTicketsCreateManyInput {
  create?: Maybe<EventTicketsCreateInput[] | EventTicketsCreateInput>;
  connect?: Maybe<
    EventTicketsWhereUniqueInput[] | EventTicketsWhereUniqueInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface EventTicketsCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  passType?: Maybe<String>;
  date?: Maybe<String>;
  location?: Maybe<String>;
  numberOfTickets?: Maybe<Int>;
}

export interface EventTicketsSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EventTicketsWhereInput>;
  AND?: Maybe<
    EventTicketsSubscriptionWhereInput[] | EventTicketsSubscriptionWhereInput
  >;
  OR?: Maybe<
    EventTicketsSubscriptionWhereInput[] | EventTicketsSubscriptionWhereInput
  >;
  NOT?: Maybe<
    EventTicketsSubscriptionWhereInput[] | EventTicketsSubscriptionWhereInput
  >;
}

export interface UserCreateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserUpdateManyMutationInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  endpoint?: Maybe<String>;
}

export interface EventUpdateInput {
  name?: Maybe<String>;
  category?: Maybe<CategoryFormat>;
  date?: Maybe<DateTimeInput>;
  location?: Maybe<String>;
  ticketsAvailable?: Maybe<TicketsAvailableUpdateManyWithoutEventInput>;
  notifyUsers?: Maybe<UserUpdateManyInput>;
}

export interface TicketsAvailableUpdateManyMutationInput {
  passType?: Maybe<String>;
  numberOfTickets?: Maybe<Int>;
  cost?: Maybe<Int>;
  comments?: Maybe<String>;
}

export interface TicketsAvailableUpdateManyWithoutEventInput {
  create?: Maybe<
    | TicketsAvailableCreateWithoutEventInput[]
    | TicketsAvailableCreateWithoutEventInput
  >;
  delete?: Maybe<
    TicketsAvailableWhereUniqueInput[] | TicketsAvailableWhereUniqueInput
  >;
  connect?: Maybe<
    TicketsAvailableWhereUniqueInput[] | TicketsAvailableWhereUniqueInput
  >;
  set?: Maybe<
    TicketsAvailableWhereUniqueInput[] | TicketsAvailableWhereUniqueInput
  >;
  disconnect?: Maybe<
    TicketsAvailableWhereUniqueInput[] | TicketsAvailableWhereUniqueInput
  >;
  update?: Maybe<
    | TicketsAvailableUpdateWithWhereUniqueWithoutEventInput[]
    | TicketsAvailableUpdateWithWhereUniqueWithoutEventInput
  >;
  upsert?: Maybe<
    | TicketsAvailableUpsertWithWhereUniqueWithoutEventInput[]
    | TicketsAvailableUpsertWithWhereUniqueWithoutEventInput
  >;
  deleteMany?: Maybe<
    TicketsAvailableScalarWhereInput[] | TicketsAvailableScalarWhereInput
  >;
  updateMany?: Maybe<
    | TicketsAvailableUpdateManyWithWhereNestedInput[]
    | TicketsAvailableUpdateManyWithWhereNestedInput
  >;
}

export type EventTicketsWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TicketsAvailableUpdateWithWhereUniqueWithoutEventInput {
  where: TicketsAvailableWhereUniqueInput;
  data: TicketsAvailableUpdateWithoutEventDataInput;
}

export interface EventUpdateOneWithoutTicketsAvailableInput {
  create?: Maybe<EventCreateWithoutTicketsAvailableInput>;
  update?: Maybe<EventUpdateWithoutTicketsAvailableDataInput>;
  upsert?: Maybe<EventUpsertWithoutTicketsAvailableInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<EventWhereUniqueInput>;
}

export interface TicketsAvailableUpdateWithoutEventDataInput {
  user?: Maybe<UserUpdateOneInput>;
  passType?: Maybe<String>;
  numberOfTickets?: Maybe<Int>;
  cost?: Maybe<Int>;
  comments?: Maybe<String>;
}

export type TicketsAvailableWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpdateManyDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  endpoint?: Maybe<String>;
}

export interface EventCreateOneWithoutTicketsAvailableInput {
  create?: Maybe<EventCreateWithoutTicketsAvailableInput>;
  connect?: Maybe<EventWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  tickets?: Maybe<EventTicketsUpdateManyInput>;
  endpoint?: Maybe<String>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface EventTicketsUpdateManyInput {
  create?: Maybe<EventTicketsCreateInput[] | EventTicketsCreateInput>;
  update?: Maybe<
    | EventTicketsUpdateWithWhereUniqueNestedInput[]
    | EventTicketsUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | EventTicketsUpsertWithWhereUniqueNestedInput[]
    | EventTicketsUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<EventTicketsWhereUniqueInput[] | EventTicketsWhereUniqueInput>;
  connect?: Maybe<
    EventTicketsWhereUniqueInput[] | EventTicketsWhereUniqueInput
  >;
  set?: Maybe<EventTicketsWhereUniqueInput[] | EventTicketsWhereUniqueInput>;
  disconnect?: Maybe<
    EventTicketsWhereUniqueInput[] | EventTicketsWhereUniqueInput
  >;
  deleteMany?: Maybe<
    EventTicketsScalarWhereInput[] | EventTicketsScalarWhereInput
  >;
  updateMany?: Maybe<
    | EventTicketsUpdateManyWithWhereNestedInput[]
    | EventTicketsUpdateManyWithWhereNestedInput
  >;
}

export interface EventTicketsUpdateInput {
  name?: Maybe<String>;
  passType?: Maybe<String>;
  date?: Maybe<String>;
  location?: Maybe<String>;
  numberOfTickets?: Maybe<Int>;
}

export interface EventTicketsUpdateWithWhereUniqueNestedInput {
  where: EventTicketsWhereUniqueInput;
  data: EventTicketsUpdateDataInput;
}

export interface TicketsAvailableCreateManyWithoutEventInput {
  create?: Maybe<
    | TicketsAvailableCreateWithoutEventInput[]
    | TicketsAvailableCreateWithoutEventInput
  >;
  connect?: Maybe<
    TicketsAvailableWhereUniqueInput[] | TicketsAvailableWhereUniqueInput
  >;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface TicketsAvailableWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  passType?: Maybe<String>;
  passType_not?: Maybe<String>;
  passType_in?: Maybe<String[] | String>;
  passType_not_in?: Maybe<String[] | String>;
  passType_lt?: Maybe<String>;
  passType_lte?: Maybe<String>;
  passType_gt?: Maybe<String>;
  passType_gte?: Maybe<String>;
  passType_contains?: Maybe<String>;
  passType_not_contains?: Maybe<String>;
  passType_starts_with?: Maybe<String>;
  passType_not_starts_with?: Maybe<String>;
  passType_ends_with?: Maybe<String>;
  passType_not_ends_with?: Maybe<String>;
  numberOfTickets?: Maybe<Int>;
  numberOfTickets_not?: Maybe<Int>;
  numberOfTickets_in?: Maybe<Int[] | Int>;
  numberOfTickets_not_in?: Maybe<Int[] | Int>;
  numberOfTickets_lt?: Maybe<Int>;
  numberOfTickets_lte?: Maybe<Int>;
  numberOfTickets_gt?: Maybe<Int>;
  numberOfTickets_gte?: Maybe<Int>;
  cost?: Maybe<Int>;
  cost_not?: Maybe<Int>;
  cost_in?: Maybe<Int[] | Int>;
  cost_not_in?: Maybe<Int[] | Int>;
  cost_lt?: Maybe<Int>;
  cost_lte?: Maybe<Int>;
  cost_gt?: Maybe<Int>;
  cost_gte?: Maybe<Int>;
  event?: Maybe<EventWhereInput>;
  comments?: Maybe<String>;
  comments_not?: Maybe<String>;
  comments_in?: Maybe<String[] | String>;
  comments_not_in?: Maybe<String[] | String>;
  comments_lt?: Maybe<String>;
  comments_lte?: Maybe<String>;
  comments_gt?: Maybe<String>;
  comments_gte?: Maybe<String>;
  comments_contains?: Maybe<String>;
  comments_not_contains?: Maybe<String>;
  comments_starts_with?: Maybe<String>;
  comments_not_starts_with?: Maybe<String>;
  comments_ends_with?: Maybe<String>;
  comments_not_ends_with?: Maybe<String>;
  AND?: Maybe<TicketsAvailableWhereInput[] | TicketsAvailableWhereInput>;
  OR?: Maybe<TicketsAvailableWhereInput[] | TicketsAvailableWhereInput>;
  NOT?: Maybe<TicketsAvailableWhereInput[] | TicketsAvailableWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  tickets_every?: Maybe<EventTicketsWhereInput>;
  tickets_some?: Maybe<EventTicketsWhereInput>;
  tickets_none?: Maybe<EventTicketsWhereInput>;
  endpoint?: Maybe<String>;
  endpoint_not?: Maybe<String>;
  endpoint_in?: Maybe<String[] | String>;
  endpoint_not_in?: Maybe<String[] | String>;
  endpoint_lt?: Maybe<String>;
  endpoint_lte?: Maybe<String>;
  endpoint_gt?: Maybe<String>;
  endpoint_gte?: Maybe<String>;
  endpoint_contains?: Maybe<String>;
  endpoint_not_contains?: Maybe<String>;
  endpoint_starts_with?: Maybe<String>;
  endpoint_not_starts_with?: Maybe<String>;
  endpoint_ends_with?: Maybe<String>;
  endpoint_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface EventSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EventWhereInput>;
  AND?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  OR?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  NOT?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  endpoint?: Maybe<String>;
  endpoint_not?: Maybe<String>;
  endpoint_in?: Maybe<String[] | String>;
  endpoint_not_in?: Maybe<String[] | String>;
  endpoint_lt?: Maybe<String>;
  endpoint_lte?: Maybe<String>;
  endpoint_gt?: Maybe<String>;
  endpoint_gte?: Maybe<String>;
  endpoint_contains?: Maybe<String>;
  endpoint_not_contains?: Maybe<String>;
  endpoint_starts_with?: Maybe<String>;
  endpoint_not_starts_with?: Maybe<String>;
  endpoint_ends_with?: Maybe<String>;
  endpoint_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface EventUpsertWithoutTicketsAvailableInput {
  update: EventUpdateWithoutTicketsAvailableDataInput;
  create: EventCreateWithoutTicketsAvailableInput;
}

export interface EventTicketsUpdateManyWithWhereNestedInput {
  where: EventTicketsScalarWhereInput;
  data: EventTicketsUpdateManyDataInput;
}

export interface TicketsAvailableUpdateInput {
  user?: Maybe<UserUpdateOneInput>;
  passType?: Maybe<String>;
  numberOfTickets?: Maybe<Int>;
  cost?: Maybe<Int>;
  event?: Maybe<EventUpdateOneWithoutTicketsAvailableInput>;
  comments?: Maybe<String>;
}

export interface EventTicketsUpdateManyDataInput {
  name?: Maybe<String>;
  passType?: Maybe<String>;
  date?: Maybe<String>;
  location?: Maybe<String>;
  numberOfTickets?: Maybe<Int>;
}

export interface TicketsAvailableCreateInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneInput>;
  passType?: Maybe<String>;
  numberOfTickets?: Maybe<Int>;
  cost?: Maybe<Int>;
  event?: Maybe<EventCreateOneWithoutTicketsAvailableInput>;
  comments?: Maybe<String>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface EventUpdateManyMutationInput {
  name?: Maybe<String>;
  category?: Maybe<CategoryFormat>;
  date?: Maybe<DateTimeInput>;
  location?: Maybe<String>;
}

export interface TicketsAvailableUpsertWithWhereUniqueWithoutEventInput {
  where: TicketsAvailableWhereUniqueInput;
  update: TicketsAvailableUpdateWithoutEventDataInput;
  create: TicketsAvailableCreateWithoutEventInput;
}

export interface TicketsAvailableCreateWithoutEventInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneInput>;
  passType?: Maybe<String>;
  numberOfTickets?: Maybe<Int>;
  cost?: Maybe<Int>;
  comments?: Maybe<String>;
}

export interface TicketsAvailableScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  passType?: Maybe<String>;
  passType_not?: Maybe<String>;
  passType_in?: Maybe<String[] | String>;
  passType_not_in?: Maybe<String[] | String>;
  passType_lt?: Maybe<String>;
  passType_lte?: Maybe<String>;
  passType_gt?: Maybe<String>;
  passType_gte?: Maybe<String>;
  passType_contains?: Maybe<String>;
  passType_not_contains?: Maybe<String>;
  passType_starts_with?: Maybe<String>;
  passType_not_starts_with?: Maybe<String>;
  passType_ends_with?: Maybe<String>;
  passType_not_ends_with?: Maybe<String>;
  numberOfTickets?: Maybe<Int>;
  numberOfTickets_not?: Maybe<Int>;
  numberOfTickets_in?: Maybe<Int[] | Int>;
  numberOfTickets_not_in?: Maybe<Int[] | Int>;
  numberOfTickets_lt?: Maybe<Int>;
  numberOfTickets_lte?: Maybe<Int>;
  numberOfTickets_gt?: Maybe<Int>;
  numberOfTickets_gte?: Maybe<Int>;
  cost?: Maybe<Int>;
  cost_not?: Maybe<Int>;
  cost_in?: Maybe<Int[] | Int>;
  cost_not_in?: Maybe<Int[] | Int>;
  cost_lt?: Maybe<Int>;
  cost_lte?: Maybe<Int>;
  cost_gt?: Maybe<Int>;
  cost_gte?: Maybe<Int>;
  comments?: Maybe<String>;
  comments_not?: Maybe<String>;
  comments_in?: Maybe<String[] | String>;
  comments_not_in?: Maybe<String[] | String>;
  comments_lt?: Maybe<String>;
  comments_lte?: Maybe<String>;
  comments_gt?: Maybe<String>;
  comments_gte?: Maybe<String>;
  comments_contains?: Maybe<String>;
  comments_not_contains?: Maybe<String>;
  comments_starts_with?: Maybe<String>;
  comments_not_starts_with?: Maybe<String>;
  comments_ends_with?: Maybe<String>;
  comments_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    TicketsAvailableScalarWhereInput[] | TicketsAvailableScalarWhereInput
  >;
  OR?: Maybe<
    TicketsAvailableScalarWhereInput[] | TicketsAvailableScalarWhereInput
  >;
  NOT?: Maybe<
    TicketsAvailableScalarWhereInput[] | TicketsAvailableScalarWhereInput
  >;
}

export interface UserUpdateInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  tickets?: Maybe<EventTicketsUpdateManyInput>;
  endpoint?: Maybe<String>;
}

export interface UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateDataInput;
}

export interface UserUpdateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueNestedInput[]
    | UserUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueNestedInput[]
    | UserUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface TicketsAvailableUpdateManyDataInput {
  passType?: Maybe<String>;
  numberOfTickets?: Maybe<Int>;
  cost?: Maybe<Int>;
  comments?: Maybe<String>;
}

export interface TicketsAvailableUpdateManyWithWhereNestedInput {
  where: TicketsAvailableScalarWhereInput;
  data: TicketsAvailableUpdateManyDataInput;
}

export interface EventUpdateWithoutTicketsAvailableDataInput {
  name?: Maybe<String>;
  category?: Maybe<CategoryFormat>;
  date?: Maybe<DateTimeInput>;
  location?: Maybe<String>;
  notifyUsers?: Maybe<UserUpdateManyInput>;
}

export interface TicketsAvailableSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TicketsAvailableWhereInput>;
  AND?: Maybe<
    | TicketsAvailableSubscriptionWhereInput[]
    | TicketsAvailableSubscriptionWhereInput
  >;
  OR?: Maybe<
    | TicketsAvailableSubscriptionWhereInput[]
    | TicketsAvailableSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | TicketsAvailableSubscriptionWhereInput[]
    | TicketsAvailableSubscriptionWhereInput
  >;
}

export interface EventCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  category?: Maybe<CategoryFormat>;
  date?: Maybe<DateTimeInput>;
  location?: Maybe<String>;
  ticketsAvailable?: Maybe<TicketsAvailableCreateManyWithoutEventInput>;
  notifyUsers?: Maybe<UserCreateManyInput>;
}

export interface EventTicketsUpdateManyMutationInput {
  name?: Maybe<String>;
  passType?: Maybe<String>;
  date?: Maybe<String>;
  location?: Maybe<String>;
  numberOfTickets?: Maybe<Int>;
}

export interface EventCreateWithoutTicketsAvailableInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  category?: Maybe<CategoryFormat>;
  date?: Maybe<DateTimeInput>;
  location?: Maybe<String>;
  notifyUsers?: Maybe<UserCreateManyInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  firstName?: String;
  lastName?: String;
  email?: String;
  password?: String;
  endpoint?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  endpoint: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  endpoint: () => Promise<AsyncIterator<String>>;
}

export interface EventEdge {
  node: Event;
  cursor: String;
}

export interface EventEdgePromise extends Promise<EventEdge>, Fragmentable {
  node: <T = EventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EventEdgeSubscription
  extends Promise<AsyncIterator<EventEdge>>,
    Fragmentable {
  node: <T = EventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface TicketsAvailable {
  id: ID_Output;
  passType?: String;
  numberOfTickets?: Int;
  cost?: Int;
  comments?: String;
}

export interface TicketsAvailablePromise
  extends Promise<TicketsAvailable>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  passType: () => Promise<String>;
  numberOfTickets: () => Promise<Int>;
  cost: () => Promise<Int>;
  event: <T = EventPromise>() => T;
  comments: () => Promise<String>;
}

export interface TicketsAvailableSubscription
  extends Promise<AsyncIterator<TicketsAvailable>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  passType: () => Promise<AsyncIterator<String>>;
  numberOfTickets: () => Promise<AsyncIterator<Int>>;
  cost: () => Promise<AsyncIterator<Int>>;
  event: <T = EventSubscription>() => T;
  comments: () => Promise<AsyncIterator<String>>;
}

export interface TicketsAvailableNullablePromise
  extends Promise<TicketsAvailable | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  passType: () => Promise<String>;
  numberOfTickets: () => Promise<Int>;
  cost: () => Promise<Int>;
  event: <T = EventPromise>() => T;
  comments: () => Promise<String>;
}

export interface AggregateEvent {
  count: Int;
}

export interface AggregateEventPromise
  extends Promise<AggregateEvent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEventSubscription
  extends Promise<AsyncIterator<AggregateEvent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TicketsAvailableSubscriptionPayload {
  mutation: MutationType;
  node: TicketsAvailable;
  updatedFields: String[];
  previousValues: TicketsAvailablePreviousValues;
}

export interface TicketsAvailableSubscriptionPayloadPromise
  extends Promise<TicketsAvailableSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TicketsAvailablePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TicketsAvailablePreviousValuesPromise>() => T;
}

export interface TicketsAvailableSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TicketsAvailableSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TicketsAvailableSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TicketsAvailablePreviousValuesSubscription>() => T;
}

export interface EventTickets {
  id: ID_Output;
  name?: String;
  passType?: String;
  date?: String;
  location?: String;
  numberOfTickets?: Int;
}

export interface EventTicketsPromise
  extends Promise<EventTickets>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  passType: () => Promise<String>;
  date: () => Promise<String>;
  location: () => Promise<String>;
  numberOfTickets: () => Promise<Int>;
}

export interface EventTicketsSubscription
  extends Promise<AsyncIterator<EventTickets>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  passType: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  numberOfTickets: () => Promise<AsyncIterator<Int>>;
}

export interface EventTicketsNullablePromise
  extends Promise<EventTickets | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  passType: () => Promise<String>;
  date: () => Promise<String>;
  location: () => Promise<String>;
  numberOfTickets: () => Promise<Int>;
}

export interface User {
  id: ID_Output;
  firstName?: String;
  lastName?: String;
  email?: String;
  password?: String;
  endpoint?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  tickets: <T = FragmentableArray<EventTickets>>(args?: {
    where?: EventTicketsWhereInput;
    orderBy?: EventTicketsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  endpoint: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  tickets: <T = Promise<AsyncIterator<EventTicketsSubscription>>>(args?: {
    where?: EventTicketsWhereInput;
    orderBy?: EventTicketsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  endpoint: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  tickets: <T = FragmentableArray<EventTickets>>(args?: {
    where?: EventTicketsWhereInput;
    orderBy?: EventTicketsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  endpoint: () => Promise<String>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface EventConnection {
  pageInfo: PageInfo;
  edges: EventEdge[];
}

export interface EventConnectionPromise
  extends Promise<EventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EventEdge>>() => T;
  aggregate: <T = AggregateEventPromise>() => T;
}

export interface EventConnectionSubscription
  extends Promise<AsyncIterator<EventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEventSubscription>() => T;
}

export interface TicketsAvailableEdge {
  node: TicketsAvailable;
  cursor: String;
}

export interface TicketsAvailableEdgePromise
  extends Promise<TicketsAvailableEdge>,
    Fragmentable {
  node: <T = TicketsAvailablePromise>() => T;
  cursor: () => Promise<String>;
}

export interface TicketsAvailableEdgeSubscription
  extends Promise<AsyncIterator<TicketsAvailableEdge>>,
    Fragmentable {
  node: <T = TicketsAvailableSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Event {
  id: ID_Output;
  name?: String;
  category?: CategoryFormat;
  date?: DateTimeOutput;
  location?: String;
}

export interface EventPromise extends Promise<Event>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  category: () => Promise<CategoryFormat>;
  date: () => Promise<DateTimeOutput>;
  location: () => Promise<String>;
  ticketsAvailable: <T = FragmentableArray<TicketsAvailable>>(args?: {
    where?: TicketsAvailableWhereInput;
    orderBy?: TicketsAvailableOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notifyUsers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EventSubscription
  extends Promise<AsyncIterator<Event>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<CategoryFormat>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  location: () => Promise<AsyncIterator<String>>;
  ticketsAvailable: <
    T = Promise<AsyncIterator<TicketsAvailableSubscription>>
  >(args?: {
    where?: TicketsAvailableWhereInput;
    orderBy?: TicketsAvailableOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notifyUsers: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EventNullablePromise
  extends Promise<Event | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  category: () => Promise<CategoryFormat>;
  date: () => Promise<DateTimeOutput>;
  location: () => Promise<String>;
  ticketsAvailable: <T = FragmentableArray<TicketsAvailable>>(args?: {
    where?: TicketsAvailableWhereInput;
    orderBy?: TicketsAvailableOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notifyUsers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateEventTickets {
  count: Int;
}

export interface AggregateEventTicketsPromise
  extends Promise<AggregateEventTickets>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEventTicketsSubscription
  extends Promise<AsyncIterator<AggregateEventTickets>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EventSubscriptionPayload {
  mutation: MutationType;
  node: Event;
  updatedFields: String[];
  previousValues: EventPreviousValues;
}

export interface EventSubscriptionPayloadPromise
  extends Promise<EventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EventPreviousValuesPromise>() => T;
}

export interface EventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EventPreviousValuesSubscription>() => T;
}

export interface EventTicketsConnection {
  pageInfo: PageInfo;
  edges: EventTicketsEdge[];
}

export interface EventTicketsConnectionPromise
  extends Promise<EventTicketsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EventTicketsEdge>>() => T;
  aggregate: <T = AggregateEventTicketsPromise>() => T;
}

export interface EventTicketsConnectionSubscription
  extends Promise<AsyncIterator<EventTicketsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EventTicketsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEventTicketsSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface EventTicketsPreviousValues {
  id: ID_Output;
  name?: String;
  passType?: String;
  date?: String;
  location?: String;
  numberOfTickets?: Int;
}

export interface EventTicketsPreviousValuesPromise
  extends Promise<EventTicketsPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  passType: () => Promise<String>;
  date: () => Promise<String>;
  location: () => Promise<String>;
  numberOfTickets: () => Promise<Int>;
}

export interface EventTicketsPreviousValuesSubscription
  extends Promise<AsyncIterator<EventTicketsPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  passType: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  numberOfTickets: () => Promise<AsyncIterator<Int>>;
}

export interface EventTicketsSubscriptionPayload {
  mutation: MutationType;
  node: EventTickets;
  updatedFields: String[];
  previousValues: EventTicketsPreviousValues;
}

export interface EventTicketsSubscriptionPayloadPromise
  extends Promise<EventTicketsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EventTicketsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EventTicketsPreviousValuesPromise>() => T;
}

export interface EventTicketsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EventTicketsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EventTicketsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EventTicketsPreviousValuesSubscription>() => T;
}

export interface TicketsAvailablePreviousValues {
  id: ID_Output;
  passType?: String;
  numberOfTickets?: Int;
  cost?: Int;
  comments?: String;
}

export interface TicketsAvailablePreviousValuesPromise
  extends Promise<TicketsAvailablePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  passType: () => Promise<String>;
  numberOfTickets: () => Promise<Int>;
  cost: () => Promise<Int>;
  comments: () => Promise<String>;
}

export interface TicketsAvailablePreviousValuesSubscription
  extends Promise<AsyncIterator<TicketsAvailablePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  passType: () => Promise<AsyncIterator<String>>;
  numberOfTickets: () => Promise<AsyncIterator<Int>>;
  cost: () => Promise<AsyncIterator<Int>>;
  comments: () => Promise<AsyncIterator<String>>;
}

export interface EventPreviousValues {
  id: ID_Output;
  name?: String;
  category?: CategoryFormat;
  date?: DateTimeOutput;
  location?: String;
}

export interface EventPreviousValuesPromise
  extends Promise<EventPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  category: () => Promise<CategoryFormat>;
  date: () => Promise<DateTimeOutput>;
  location: () => Promise<String>;
}

export interface EventPreviousValuesSubscription
  extends Promise<AsyncIterator<EventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<CategoryFormat>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  location: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTicketsAvailable {
  count: Int;
}

export interface AggregateTicketsAvailablePromise
  extends Promise<AggregateTicketsAvailable>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTicketsAvailableSubscription
  extends Promise<AsyncIterator<AggregateTicketsAvailable>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface EventTicketsEdge {
  node: EventTickets;
  cursor: String;
}

export interface EventTicketsEdgePromise
  extends Promise<EventTicketsEdge>,
    Fragmentable {
  node: <T = EventTicketsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EventTicketsEdgeSubscription
  extends Promise<AsyncIterator<EventTicketsEdge>>,
    Fragmentable {
  node: <T = EventTicketsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface TicketsAvailableConnection {
  pageInfo: PageInfo;
  edges: TicketsAvailableEdge[];
}

export interface TicketsAvailableConnectionPromise
  extends Promise<TicketsAvailableConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TicketsAvailableEdge>>() => T;
  aggregate: <T = AggregateTicketsAvailablePromise>() => T;
}

export interface TicketsAvailableConnectionSubscription
  extends Promise<AsyncIterator<TicketsAvailableConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TicketsAvailableEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTicketsAvailableSubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "EventTickets",
    embedded: false
  },
  {
    name: "TicketsAvailable",
    embedded: false
  },
  {
    name: "CategoryFormat",
    embedded: false
  },
  {
    name: "Event",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
